<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="pyCurl_ON" id="2" localization="8" tooltip="PythonでCurlを叩くボックス" x="231" y="73">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[#SWITCH_ON
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #Get FrameManager
        self.framemanager = ALProxy("ALFrameManager")
        #Initialization
        self.folderName = None

    def onUnload(self):
        import sys

        #Initialization
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self, p):
        import sys, os

        #Get Path of Library
        self.folderName = os.path.join(
            self.framemanager.getBehaviorPath(self.behaviorId), "../lib")

        #Add Path to import Library
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        #Read Library
        import pycurl

        option = {"赤外線情報を入力"}

        #POST
        c = pycurl.Curl()
        c.setopt(pycurl.URL, 'http://IP Address/messages')
        c.setopt(pycurl.HTTPHEADER, ['X-Requested-With: curl'])
        c.setopt(pycurl.POSTFIELDS, json.dumps(option))
        c.setopt(pycurl.POST, 1)
        c.perform()
        c.close()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="pyCurl_OFF" id="1" localization="8" tooltip="PythonでCurlを叩くボックス" x="231" y="250">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[#SWITCH_OFF
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #Get FrameManager
        self.framemanager = ALProxy("ALFrameManager")
        #Initialization
        self.folderName = None

    def onUnload(self):
        import sys

        #Initialization
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self, p):
        import sys, os

        #Get Path of Library
        self.folderName = os.path.join(
            self.framemanager.getBehaviorPath(self.behaviorId), "../lib")

        #Add Path to import Library
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        #Read Library
        import pycurl

        option = {"赤外線情報を入力"}

        #POST
        c = pycurl.Curl()
        c.setopt(pycurl.URL, 'http://IP Address/messages')
        c.setopt(pycurl.HTTPHEADER, ['X-Requested-With: curl'])
        c.setopt(pycurl.POSTFIELDS, json.dumps(option))
        c.setopt(pycurl.POST, 1)
        c.perform()
        c.close()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="pyCurl_talk" id="3" localization="8" tooltip="PythonでCurlを叩くボックス" x="567" y="410">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[#SWITCH_ON
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #Get FrameManager
        self.framemanager = ALProxy("ALFrameManager")
        #Initialization
        self.folderName = None

    def onUnload(self):
        import sys

        #Initialization
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self, p):
        import sys, os

        #Get Path of Library
        self.folderName = os.path.join(
            self.framemanager.getBehaviorPath(self.behaviorId), "../lib")

        #Add Path to import Library
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        #Read Library
        import pycurl

        option = { "apikey_cocorobo": "apikeyを入力", "message":"だまってろ、ボケ" }

        #POST
        c = pycurl.Curl()
        c.setopt(pycurl.URL, 'https://developer.cloudlabs.sharp.co.jp/cloudlabs-api/cocorobo/speech')
        c.setopt(pycurl.HTTPHEADER, ['Content-Type : application/json'])
        c.setopt(pycurl.POSTFIELDS, json.dumps(option))
        c.setopt(pycurl.POST, 1)
        c.perform()
        c.close


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="395" y="473">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="pyCurl_auth" id="4" localization="8" tooltip="PythonでCurlを叩くボックス" x="229" y="402">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[#SWITCH_ON
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #Get FrameManager
        self.framemanager = ALProxy("ALFrameManager")
        #Initialization
        self.folderName = None

    def onUnload(self):
        import sys

        #Initialization
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self, p):
        import sys, os

        #Get Path of Library
        self.folderName = os.path.join(
            self.framemanager.getBehaviorPath(self.behaviorId), "../lib")

        #Add Path to import Library
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        #Read Library
        import pycurl

        option = {"apikey_cocorobo":"apikeyを入力"}

        #POST
        c = pycurl.Curl()
        c.setopt(pycurl.URL, 'https://developer.cloudlabs.sharp.co.jp/cloudlabs-api/cocorobo/auth')
        c.setopt(pycurl.HTTPHEADER, ['Content-Type : application/json'])
        c.setopt(pycurl.POSTFIELDS, json.dumps(option))
        c.setopt(pycurl.POST, 1)
        c.perform()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
